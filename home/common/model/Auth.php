<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/9/23
 * Time: 14:27
 */

namespace app\common\model;


use think\Db;

class Auth extends Base
{
    private $user;
    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->user = $user;
    }
    /**
     * 检查权限
     * @param string|array name 需要验证的规则列表,支持逗号分隔的权限规则或索引数组
     * @return boolean           通过验证返回true;失败返回false
     */
    public function check($name) {
        $uid = 0;
        if(!empty($this->user)){
            $uid = $this->user['id'];
        }
        $authList = $this->getAuthList($uid); //获取用户需要验证的所有有效规则列表
        dump($authList);
        if (is_string($name)) {
            $name = strtolower($name);
        }
        if(in_array($name,$authList)){
            return true;
        }

        return false;
    }

    /**
     * 根据用户id获取用户组,返回值为数组
     * @param int $uid      用户id
     * @return array       用户所属的用户组 array(
     *     array('uid'=>'用户id','group_id'=>'用户组id','title'=>'用户组名称','rules'=>'用户组拥有的规则id,多个,号隔开'),
     *     ...)
     */
    public function getGroups($uid) {
        static $groups = array();
        if (isset($groups[$uid]))
            return $groups[$uid];
        $user_groups = Db::name('user_access')
            ->alias('a')
            ->join($this->_config['auth_group']." g", "g.id=a.group_id")
            ->where("a.uid='$uid' and g.status='1'")
            ->field('uid,group_id,title,rules')->select();
        $groups[$uid] = $user_groups ? $user_groups : array();
        return $groups[$uid];
    }

    /**
     * 获得权限列表
     * @param integer $uid  用户id
     * @return array
     */
    protected function getAuthList($uid) {
        static $_authList = array(); //保存用户验证通过的权限列表
        if (isset($_authList[$uid])) {
            return $_authList[$uid];
        }
        if( isset($_SESSION['_auth_list_'.$uid])){
            return $_SESSION['_auth_list_'.$uid];
        }

        //读取用户所属用户组
        $groups = $this->getGroups($uid);
        $ids = array('read_rules'=>'','unread_rules'=>'');//保存用户所属用户组设置的所有权限规则id
        foreach ($groups as $g) {
            $ids = array_merge( $ids, explode(',', trim($g['rules'], ',') ) );
        }
        $ids = array_unique($ids);
        if (empty($ids)) {
            $_authList[$uid] = array();
            return array();
        }

        $map=array(
            'id'=>array('in',$ids),
            'status'=>1,
        );
        //读取用户组所有权限规则
        $rules = Db::name('auth_rule')->where($map)->column('action');
        if(empty($rules)){
            $_authList[$uid] = array();
        }
        $_authList[$uid] = $rules;
        $_SESSION['_auth_list_'.$uid]=$rules;
        return array_unique($rules);
    }

    /**
     * 获得用户资料,根据自己的情况读取数据库
     */
    protected function setUser($uid) {
        static $userinfo=array();
        if(!isset($userinfo[$uid])){
            $userinfo[$uid]=\think\Db::name($this->_config['auth_user'])->where(array('uid'=>$uid))->find();
        }
        return $userinfo[$uid];
    }


}