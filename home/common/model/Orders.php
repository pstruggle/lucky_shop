<?php
namespace app\common\model;

use app\common\model\Base;
use think\Db;

class Orders extends Base
{
    private $_orders ;
    private $_cart ;

    protected function initialize(){
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->_orders = $this;
        $this->_base = $this;
        $this->_cart = model('cart');
    }
    //获取订单
    public function getOrder($where=[]){
        $orders = $this->_orders->where($where)->order(['addtime'=>'desc'])->select();
        $sumprice = 0;
        foreach ($orders as $item => $order){
            $carts = $this->_cart->getCarts(['oid'=>$order['id']]);
            $orders[$item]['carts'] = $carts;
            $sumprice += $order['sumprice']+ $order['freight'];
        }
        $agg['orders'] = $orders;
        $agg['sumprice'] = $sumprice;
        return $agg;
    }
    //编辑订单
    public function editOrder($value,$where){
        return $this->_orders->save($value,$where);
    }
    //一周的订单
    public function weekOrder($where =[]){
        $times = get_week();
        $weeks = [];
        foreach ($times as $i => $time){
            $where['addtime'] = [];
            if(!empty($times[$i+1])){
                $where['addtime'][] = ['>',$time];
                $where['addtime'][] = ['<=',$times[$i+1]];

            }else{
                if($time){
                    $where['addtime'] = ['>',$time];
                }else{
                    $where['addtime'] = ['<',$time];
                }
            }
            $price = $this->_orders->where($where)->sum('payprice');
            $weeks[] = $price ? $price : 0;
        }
        return $weeks;
    }
    //生成订单
    public function orders($data=[]){
        $str = $data['carts'];
        $uid = $data['uid'];
        $where = ['c.uid'=>$uid,'c.status'=>1,'c.id'=>['in',$str]];
        $carts = $this->_cart->getCarts($where);
        $orders = [];
        $oids = [];
        $error = ['code'=>1];
        foreach ($carts as $cart){
            $orders[$cart['storeid']][] = $cart;
        }
        Db::startTrans();
        foreach ($orders as $order){
            $freight = 0;
            $sum = 0;
            $sumprice = 0;
            $cids = [];
            $integral = 0;
            //积分换算比例
            $ratio = getCache('integral')['integral'];
            foreach ($order as $o){
                if($o['freightway'] == 1){
                    $freight = $freight< $o['freight'] ? $o['freight']: $freight;
                }else{
                    $freight += $o['freight'];
                }
                $mid = $o['mid'];
                $sid = $o['storeid'];
                $sum += $o['sum'];
                $sumprice += $o['price']*$o['sum'];
                $cids[] = $o['id'];
                $integral += integral($o['price'],$o['ratio'],$ratio,$o['sum']);
            }
            $map = [
                'onumber' => serial(),
                'serialnumber' => '',
                'uid' => $uid,
                'mid' => $mid,
                'sid' => $sid,
                'addressid' => $data['addressid'],
                'freight' => $freight,
                'sum' => $sum,
                'sumprice' =>$sumprice,
                'payprice' =>$sumprice+$freight,
                'buyremark' =>$data['remarks'],
                'payment' =>'',
                'status' =>'1',
                'integral'=>$integral,
                'addtime' =>time(),
            ];
            if(!Db::name('orders')->insert($map)){
                Db::rollback();
                $error['code'] = 0;
                $error['info'] = '添加失败1';
                return $error;
            }
            $oids[] = $oid = Db::name('orders')->getLastInsID();
            $where = ['id'=>['in',implode(',',$cids)]];
            $data = ['oid'=>$oid,'status'=>2];
            if(!$this->_cart->modCart($data,$where)){
                Db::rollback();
                $error['code'] = 0;
                $error['info'] = '添加失败';
                return $error;
            }
        }
        Db::commit();
        $error['oids'] = $oids;
        return $error;
    }
    // 获取订单并且还有商品
    public function getOrderCarts(){

    }



}