<?php
namespace app\common\model;

use app\common\model\Base;
use think\Db;
use think\Loader;
use think\Model;

class Goods extends Base
{
    private $_goods ;

    protected function initialize(){
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->_goods = $this;
        $this->_base = $this;
    }
    /*
     * 商户方获取列表
     * */
    public function getGoods($condition=[],$order=['id'=>'desc']){
        $join = [
            ['merchant m','g.mid = m.id'],
            ['store s', 'g.storeid = s.id']
        ];
        $field = ['g.*','m.name','m.phone','s.store','s.phones'];
        return $this->_goods
            ->alias('g')
            ->join($join)
            ->field($field)
            ->where($condition)->order($order)->paginate(20);
    }
    // 用户端首页获取商品
    public function getUGoods($type,$location = []){
        $prefix = config("database.prefix");
        $city = !empty($location['location_city'])?$location['location_city']:'';
//        $county = '西湖区';
        $county = !empty($location['location_county'])?$location['location_county']:'';
        $datastr = "select g.* from ".$prefix."goods g join ".$prefix."store s on g.storeid = s.id  where `s`.`city` like '%".$city."%' and `s`.`county` like '%".$county."%' and CONCAT(',',g.tags,',') REGEXP '[^0-9]+[".$type."][^0-9]+' limit 5";
        return $this->_goods->query($datastr);
    }
    // 用户端获取商品
    public function getGoodsList($location = [],$where = [],$order=[]){
        $prefix = config("database.prefix");
        if(!empty($location['location_city'])){
            $where['s.city'] = ['like','%'.$location['location_city'].'%'];

        }
        if(!empty($location['location_county'])){
            $where['s.county'] = ['like','%'.$location['location_county'].'%'];
        }
        return $this->_goods
            ->alias('g')
            ->join($prefix.'store s','g.storeid = s.id')
            ->field('g.*')
            ->where($where)->order($order)->paginate(20);
    }
    // 获取条件
    public function getWhere(){
        $where = ['a.type'=>'1','a.status'=>'1'];
        return $where;
    }
    // 获取旅游休闲卡列表
    public function getArders($where=[],$order=[],$page=20){
        $a_where = ['type'=>1];
        $sql1 = $this->_goods->where($a_where)->buildSql();
        $join = [
            ['merchant m', "a.mid = m.id"]
        ];
        $field = ['a.*','m.name','m.phone'];
        return Db::table($sql1.' a')
            ->join($join)
            ->field($field)
            ->where($where)
            ->order($order)
            ->paginate($page);
    }
    // 获取单个休闲卡
    public function getArder(){
        if(!input('pid')){
            return false;
        }
        $act = input('act');
        $where = ['type'=>1, 'id'=>input('pid')];
        if($act != 'admin'){
            $where['status'] = '1';
        }
        $arder = $this->_goods->where($where)->find();
        if(!$arder){
            return false;
        }
        $arder['pics'] = explode(',',$arder['navpic']);
        $arder['merchant'] = Db::table('ww_merchant')->where(['id'=>$arder['mid']])->find();

        return $arder;
    }
    /*
     * 商品添加
     * */
    public function goodsAdd($mid){
        $map = [];
        $error = ['code'=>1];
        $maxprice = 0; //最高价格
        $minprice = 0; //最低价格
        $spec_arr = []; //储存规格列表
        $spec_arrs = []; //储存规格列表值
        $map['tradename']   = input('tradename');
        $map['tradecode']   = input('tradecode');
        $map['storeid']     = input('storeid');
        $map['mid']         = $mid;
        $map['unit']        = input('unit');
        $map['ftypes']      = input('ftypes');
        $map['types']       = input('types');
        $map['bid']         = input('bid');
        $map['oriprice']    = input('oriprice');
        $map['ingprice']    = input('ingprice');
        $map['weight']      = input('weight');
        $map['details']     = input('details');
        $map['status']      = input('status');
        $map['ratio']       = input('ratio');
        $map['freight']     = input('freight');
        $map['freightway']  = input('freightway');
        $map['fmalltype']    = input('fmalltype');
        $map['malltype']    = input('malltype');
        $map['addtime']     = time();
        $navpics    = input('navpic/a')?input('navpic/a'):[];
        $tags       = input('tags/a')?input('tags/a'):[];
        $specs      = input('specs/a')?input('specs/a'):[] ;
        $specattrs  = input('specattrs/a')?input('specattrs/a'):[];
        $numbers    = input('numbers/a')?input('numbers/a'):[];
        $old_prices = input('old_prices/a')?input('old_prices/a'):[];
        $prices     = input('prices/a')?input('prices/a'):[];
        $seckill_prices= input('seckill_prices/a')?input('seckill_prices/a'):[];
        $stock_nums  = input('stock_nums/a')?input('stock_nums/a'):[];
        $attrs  = input('attrs/a')?input('attrs/a'):[];
        $attrnum  = input('attrnum/a')?input('attrnum/a'):[];
        $attrval  = input('attrval/a')?input('attrval/a'):[];
        $map['pic']  = empty($navpics[0])?'':$navpics[0];
        $map['navpic']  = implode(',',$navpics);
        $map['tags']  = implode(',',$tags);
        // 启动事务
        Db::startTrans();
        try{
            // 商品的添加
            $result = $this->_goods->validate(true)->save($map);
            if(!$result){
                $error['code'] = 0;
                $error['info'] = $this->_goods->getError();
                Db::rollback();
                return $error;
            }
            $gid = $this->_goods->id;
            //规格的添加
            if(is_array($specs)){
                $i = 0;
                foreach ($specs as $item => $spec){
                    $data = [];
                    $data['gid'] = $gid;
                    $data['specs'] = $spec;
                    $data['pid'] = '0';
                    $data['addtime'] = $map['addtime'];
                    $validate = Loader::validate('specs');
                    if(!$validate->check($data)){
                        $error['code'] = 0;
                        $error['info'] = $validate->getError();
                        Db::rollback();
                        return $error;
                    }
                    Db::name('specs')->insert($data);
                    $pid = Db::name('specs')->getLastInsID();
                    foreach ($specattrs[$item] as $specattr){
                        $adata = [
                            'gid' => $gid,
                            'specs' => $specattr,
                            'pid' => $pid,
                            'addtime' =>$map['addtime']
                        ];
                        $validate = Loader::validate('specs');
                        if(!$validate->check($adata)){
                            $error['code'] = 0;
                            $error['info'] = $validate->getError();
                            Db::rollback();
                            return $error;
                        }

                        Db::name('specs')->insert($adata);
                        $fid = Db::name('specs')->getLastInsID();
                        $spec_arr[$i][] = $fid;
                    }
                    $i++;
                }
                // 规格列表的添加
                if($spec_arr){
                    $spec_arrs = staggered($spec_arr);
                    if(is_array($spec_arrs)){
                        foreach ($spec_arrs as $item => $spec_a){
                            $minprice = $minprice == 0 || $minprice > $seckill_prices[$item] ? $seckill_prices[$item] : $minprice;
                            $maxprice = $maxprice < $seckill_prices[$item] ? $seckill_prices[$item] : $maxprice;
                            $data = [
                                'specsval' => $spec_a,
                                'code' => $numbers[$item],
                                'bid' => $old_prices[$item]?$old_prices[$item]:0,
                                'oriprice' => $prices[$item]?$prices[$item]:0,
                                'ingprice' => $seckill_prices[$item]?$seckill_prices[$item]:0,
                                'stock' => $stock_nums[$item]?$stock_nums[$item]:'-1',
                                'addtime' => $map['addtime']
                            ];
                            Db::name('specsval')->insert($data);
                        }
                    }
                }
            }
            //属性添加
            if(is_array($attrs)){
                foreach ($attrs as $item=> $attr){
                    $data = [
                        'gid' => $gid,
                        'attrs' => $attr,
                        'pid' => '0',
                        'rate' => $attrnum[$item],
                        'addtime' => $map['addtime']
                    ];
                    $validate = Loader::validate('attrs');
                    if(!$validate->check($data)){
                        $error['code'] = 0;
                        $error['info'] = $validate->getError();
                        Db::rollback();
                        return $error;
                    }
                    Db::name('attrs')->insert($data);
                    $pid = Db::name('attrs')->getLastInsID();
                    foreach ($attrval[$item] as $x => $val){
                        $data = [
                            'gid' => $gid,
                            'attrs' => $val,
                            'pid' => $pid,
                            'rate' => '0',
                            'addtime' => $map['addtime']
                        ];
                        $validate = Loader::validate('attrs');
                        if(!$validate->check($data)){
                            $error['code'] = 0;
                            $error['info'] = $validate->getError();
                            Db::rollback();
                            return $error;
                        }
                        Db::name('attrs')->insert($data);
                    }
                }
            }
            // 提交事务
            Db::commit();
            return $error;

        }catch (\Exception $e){
            $error['code'] = 0;
            $error['info'] = '程序出错，请联系管理员！';

            // 回滚事务
            Db::rollback();
            return $error;
        }
    }
    public function goodsMod($mid,$gid){
        $map = [];
        $error = ['code'=>1];
        $maxprice = 0; //最高价格
        $minprice = 0; //最低价格
        $spec_arr = []; //储存规格列表
        $spec_arrs = []; //储存规格列表值
        $map['tradename']   = input('tradename');
        $map['tradecode']   = input('tradecode');
        $map['storeid']     = input('storeid');
        $map['mid']         = $mid;
        $map['unit']        = input('unit');
        $map['ftypes']      = input('ftypes');
        $map['types']       = input('types');
        $map['bid']         = input('bid');
        $map['oriprice']    = input('oriprice');
        $map['ingprice']    = input('ingprice');
        $map['weight']      = input('weight');
        $map['details']     = input('details');
        $map['status']      = input('status');
        $map['ratio']       = input('ratio');
        $map['freight']       = input('freight');
        $map['freightway']       = input('freightway');
        $map['fmalltype']    = input('fmalltype');
        $map['malltype']    = input('malltype');
        $navpics    = input('navpic/a')?input('navpic/a'):[];
        $tags       = input('tags/a')?input('tags/a'):[];
        $specs      = input('specs/a')?input('specs/a'):[] ;
        $specattrs  = input('specattrs/a')?input('specattrs/a'):[];
        $numbers     = input('numbers/a')?input('numbers/a'):[];
        $old_prices  = input('old_prices/a')?input('old_prices/a'):[];
        $prices      = input('prices/a')?input('prices/a'):[];
        $seckill_prices= input('seckill_prices/a')?input('seckill_prices/a'):[];
        $stock_nums  = input('stock_nums/a')?input('stock_nums/a'):[];
        $attrs  = input('attrs/a')?input('attrs/a'):[];
        $attrnum  = input('attrnum/a')?input('attrnum/a'):[];
        $attrval  = input('attrval/a')?input('attrval/a'):[];
        $map['pic']  = empty($navpics[0])?'':$navpics[0];
        $map['navpic']  = implode(',',$navpics);
        $map['tags']  = implode(',',$tags);
        // 启动事务
        Db::startTrans();
        try{
            // 商品的添加
            $result = $this->_goods->validate(true)->save($map,['id'=>$gid]);
            if(!$result){
                $error['code'] = 0;
                $error['info'] = $this->_goods->getError();
                Db::rollback();
                return $error;
            }

            //规格的添加
            if(is_array($specs)){
                Db::name('specs')->where('gid',$gid)->delete();
                $i = 0;
                foreach ($specs as $item => $spec){
                    $data = [];
                    $data['gid'] = $gid;
                    $data['specs'] = $spec;
                    $data['pid'] = '0';
                    $data['addtime'] = $map['addtime'];
                    $validate = Loader::validate('specs');
                    if(!$validate->check($data)){
                        $error['code'] = 0;
                        $error['info'] = $validate->getError();
                        Db::rollback();
                        return $error;
                    }
                    Db::name('specs')->insert($data);
                    $pid = Db::name('specs')->getLastInsID();
                    foreach ($specattrs[$item] as $specattr){
                        $adata = [
                            'gid' => $gid,
                            'specs' => $specattr,
                            'pid' => $pid,
                            'addtime' =>$map['addtime']
                        ];
                        $validate = Loader::validate('specs');
                        if(!$validate->check($adata)){
                            $error['code'] = 0;
                            $error['info'] = $validate->getError();
                            Db::rollback();
                            return $error;
                        }

                        Db::name('specs')->insert($adata);
                        $fid = Db::name('specs')->getLastInsID();
                        $spec_arr[$i][] = $fid;
                    }
                    $i++;
                }
                // 规格列表的添加
                if($spec_arr){
                    $spec_arrs = staggered($spec_arr);
                    if(is_array($spec_arrs)){
                        foreach ($spec_arrs as $item => $spec_a){
                            $minprice = $minprice == 0 || $minprice > $seckill_prices[$item] ? $seckill_prices[$item] : $minprice;
                            $maxprice = $maxprice < $seckill_prices[$item] ? $seckill_prices[$item] : $maxprice;
                            $data = [
                                'specsval' => $spec_a,
                                'code' => $numbers[$item],
                                'bid' => $old_prices[$item]?$old_prices[$item]:0,
                                'oriprice' => $prices[$item]?$prices[$item]:0,
                                'ingprice' => $seckill_prices[$item]?$seckill_prices[$item]:0,
                                'stock' => $stock_nums[$item]?$stock_nums[$item]:'-1',
                                'addtime' => $map['addtime']
                            ];
                            Db::name('specsval')->insert($data);
                        }
                    }
                }
            }
            //属性添加
            if(is_array($attrs)){
                Db::name('attrs')->where('gid',$gid)->delete();
                foreach ($attrs as $item=> $attr){
                    $data = [
                        'gid' => $gid,
                        'attrs' => $attr,
                        'pid' => '0',
                        'rate' => $attrnum[$item],
                        'addtime' => $map['addtime']
                    ];
                    $validate = Loader::validate('attrs');
                    if(!$validate->check($data)){
                        $error['code'] = 0;
                        $error['info'] = $validate->getError();
                        Db::rollback();
                        return $error;
                    }
                    Db::name('attrs')->insert($data);
                    $pid = Db::name('attrs')->getLastInsID();
                    foreach ($attrval[$item] as $x => $val){
                        $data = [
                            'gid' => $gid,
                            'attrs' => $val,
                            'pid' => $pid,
                            'rate' => '0',
                            'addtime' => $map['addtime']
                        ];
                        $validate = Loader::validate('attrs');
                        if(!$validate->check($data)){
                            $error['code'] = 0;
                            $error['info'] = $validate->getError();
                            Db::rollback();
                            return $error;
                        }
                        Db::name('attrs')->insert($data);
                    }
                }
            }
            // 提交事务
            Db::commit();
            return $error;

        }catch (\Exception $e){
            $error['code'] = 0;
            $error['info'] = '操作错误！';

            // 回滚事务
            Db::rollback();
            return $error;
        }

    }
}
