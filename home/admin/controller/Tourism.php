<?php
namespace app\admin\controller;

use app\admin\controller\Base;
use think\Db;

class Tourism extends Base
{
    private $_destination;
    private $_setout;
    private $_line;
    private $_trip;
    private $_proType;
    private $_shop;
    private $_safe;
    private $_userinfo;
    private $_contract;
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->_destination = model('destination');
        $this->_setout = model('setout');
        $this->_line = model('_line');
        $this->_trip = model('trip');
        $this->_proType = model('proType');
        $this->_shop = model('shop');
        $this->_safe = model('safe');
        $this->_userinfo = model('userinfo');
        $this->_contract = model('contract');
    }
    // 目的地列表
    public function destination()
    {
        $status = input('status');
        if($status == '1'){
            $where['d.status'] = $status;
            $dests = $this->_destination->getDestination($where);
            $this->assign([
                'dests'=> $dests,
                'page'=> ''
            ]);
        }else{
            $style = input('style');
            $where['d.status'] = empty($status)?'2':$status;
            $where['d.style'] = empty($style)?'1':$style;
            $order = ['d.style'=>'desc'];
            $destinations = $this->_destination->getFormatD($where,$order);
            $this->assign([
                'destinations'=> $destinations,
                'page'=> ''
            ]);
        }
        $this->assign([
            'title'=> '目的地列表',
        ]);
        return $this->template();
    }
    //查看目的地
    public function eye_dest(){
        $id = input('id');
        $where = ['id'=>$id];
        $dest = $this->_destination->where($where)->find();
        if($dest['pid'] == 0){
            $dest['pinfo'] = '顶级目的地';
        }else{
            $dest['pinfo'] = $this->_destination->where(['id'=>$dest['pid']])->value('destination');
        }
        $this->assign([
            'title'=>'',
            'dest'=>$dest
        ]);

        return $this->template();
    }
    //编辑目的地
    public function editdest(){
        $act = input('act');
        $id = input('id');
        $map = [];
        $where = ['id'=>$id];
        if($act == 'adopt'){
            $map['status'] = 2;
        }
        if($act == 'notgo'){
            $map['status'] = 0;
        }
        if($act == 'del'){
           $result = $this->_destination->where($where)->delete();
            if($result){
                return $this->success('编辑成功');
            }else{
                return $this->error('编辑失败');
            }
        }
        if($act == 'update'){
            $map = [
                'destination'=>input('destination'),
                'pid'=>input('pid'),
                'status'=>'2',
                'style'=>input('style'),
                'weight'=>0,
            ];
            $map['letter'] = getFirstCharter($map['destination']);
            $ok=new \ChineseSpell();
            $s1 = iconv('UTF-8', 'gb2312', $map['destination']);
            $map['pinyin'] = $ok->getChineseSpells($s1);
        }
        $result = $this->_destination->where($where)->update($map);
        if($result){
            return $this->success('编辑成功',url('Tourism/destination'));
        }else{
            return $this->error('编辑失败');
        }
    }
    public function dest_edit()
    {
        $act = 'add';
        $where = ['d.status'=>'2'];
        $destinations = $this->_destination->getFormatD($where);
        $did = input('did');
        if(!empty($did)){
            $act = 'update';
            $d_where = ['id'=>input('did')];
            $dest = $this->_destination->where($d_where)->find();
            $this->assign([
                'dest' => $dest,
            ]);
        }
        $this->assign([
            'title'=> '目的地的添加修改',
            'act' => $act,
            'destinations'=> $destinations,
        ]);
        return $this->template();
    }

    //出发地列表
    public function setout()
    {
        $where = [];
        $status = input('status')?input('status'):'2';
        $where['s.status'] = $status;
        if(input('setout')){
            $where['setout'] = ['like','%'.input('setout').'%'];
        }
        if(input('mid')){
            $where['mid'] = input('mid');
        }

        $setouts = $this->_setout->getSetout($where);
        $this->assign([
            'title'=> '出发地列表',
            'setouts'=> $setouts,
            'page'=> '',
        ]);
        return $this->template();
    }
    // 出发地的编辑
    public function editsetout(){
        $act = input('act');
        $id = input('id');
        $map = [];
        $where = ['id'=>$id];
        if($act == 'adopt'){
            $map['status'] = 2;
        }
        if($act == 'notgo'){
            $map['status'] = 0;
        }
        $result = $this->_setout->where($where)->update($map);
        if($result){
            return $this->success('编辑成功');
        }else{
            return $this->error('编辑失败');
        }
    }
    // 行程列表
    public function trip(){
        $where = ['m.status'=>2];
        if(input('status')==='0' || input('status')){
            $where['t.status'] = input('status');
        }
        if(input('setout')){
            $where['t.set_id'] = input('setout');
        }
        if(input('destination')){
            $where['FIND_IN_SET('.input('destination').',l.desid)'] = ['notin',''];
        }
        if(input('title')){
            $where['t.title'] = ['like','%'.input('title').'%'];
        }
        if(input('mid')){
            $where['t.mid'] = input('mid');
        }
        if(input('isindex') === '0' || input('isindex')){
            $where['t.isindex'] = input('isindex');
        }
        if(input('valid')){
            if(input('valid') == '1'){
                $where['t.after_date'] = ['>=',date('Ymd')];
            }elseif(input('valid') == '2'){
                $where['t.after_date'] = ['<',date('Ymd')];
            }
        }
        $count = $this->_trip->count();
        $trips = $this->_trip->getTrips($where,['addtime'=>'desc']);
        $page = $trips->render();
        //出发地
        $s_where = ['status' => 2];
        $setouts = $this->_setout->where($s_where)->select();
        //目的地
        $d_where = ['d.status'=>'2'];
        $destinations = $this->_destination->getFormatD($d_where);
        $this->assign([
            'title'=> '行程列表',
            'trips'=> $trips,
            'page'=> $page,
            'count' => $count,
            'destinations'=> $destinations,
            'setouts'=> $setouts,
        ]);
        return $this->template();
    }
    // 行程编辑
    public function edittrip(){
        $act = input('act');
        $id = input('id');
        $map = [];
        $where = ['id'=>$id];
        $data=[];
        $trip = $this->_trip->where($where)->find();
        $phone = Db::name('merchant')->where('id',$trip['mid'])->value('phone');
        $data['recNum'] = $phone;
        $data['temp'] = 'sms_auditorStatus';
        $aliyun = controller('api/Aliyun');
        switch ($act){
            case 'adopt':
                $map['status'] = 2;
                $data['param'] = ['通过'];
                break;
            case 'notgo':
                $map['status'] = 0;
                $data['param'] = ['不通过'];
                break;
            case 'flick_yes':
                $map['flick_status'] = 2;
                $map['flick'] = 1;
                $data['param'] = ['特价甩尾 通过'];
                break;
            case 'flick_no':
                $map['flick_status'] = 0;
                $map['flick'] = 0;
                $data['param'] = ['特价甩尾 不通过'];
                break;
            case 'index_yes':
                $map['isindex'] = 1;
                break;
            case "index_no":
                $map['isindex'] = 0;
                break;
            case  'hot_yes':
                $map['hot'] = 1;
                break;
            case 'hot_no':
                $map['hot'] = 0;
                break;
            case 'situation_yes':
                $map['situation'] = 1;
                break;
            case 'situation_no':
                $map['situation'] = 0;
                break;
            default :
                break;
        }

        $result = $this->_trip->where($where)->update($map);

        if($result){
            if($act == 'notgo' || $act == 'adopt' || $act == 'flick_yes' || $act == 'flick_no'){
                $result = $aliyun->ajax_send($data);
            }
            return $this->success('编辑成功');
        }else{
            return $this->error('编辑失败');
        }
    }
    // 线路列表
    public function line(){
        $where = [];
        if(input('name')){
            $where['l.name'] = ['like','%'.input('name').'%'];
        }
        if(input('destination')){
            $where['FIND_IN_SET('.input('destination').',l.desid)'] = ['notin',''];
        }
        if(input('mid')){
            $where['mid'] = input('mid');
        }
        $lines = $this->_line->getLines($where);
        $page = $lines->render();
        //目的地
        $d_where = ['d.status'=>'2'];
        $destinations = $this->_destination->getFormatD($d_where);

        $this->assign([
            'title'=> '出发地列表',
            'lines'=> $lines,
            'page'=> $page,
            'destinations'=> $destinations,
        ]);
        return $this->template();
    }
    // 产品类型
    public function pro_type(){
        $pro_types = $this->_proType->getList();
        $page = $pro_types->render();
        $this->assign([
            'title'=> '产品类型',
            'pro_types'=> $pro_types,
//            'lines'=> $lines,
            'page'=> $page,
        ]);
        return $this->template();
    }
    //订单orders列表
    public function orders(){
        $where = ['s.pay_status'=>['>',0]];
        $pay_status = input('pay_status');
        $uid = input('uid');
        $mid = input('mid');
        $confirm = input('confirm');
        $outstart = input('outstart');
        $outend = input('outend');
        if(!empty($pay_status)){
            $where['s.pay_status'] = $pay_status;
        }
        if(!empty($uid)){
            $where['s.uid'] = $uid;
        }
        if(!empty($mid)){
            $where['s.mid'] = $mid;
        }
        if(!empty($confirm)){
            $where['s.confirm'] = $confirm;
        }
        if(!empty($outstart)){
            $where['s.outtime'][] = ['>=',strtotime($outstart)];
        }
        if(!empty($outend)){
            $where['s.outtime'][] = ['<=',strtotime($outend)];
        }
        $order = ['s.addtime'=>'desc','s.confirm'=>'desc'];
        $shops = $this->_shop->getShops($where,$order);
        $page = $shops->render();
        $this->assign([
            'title'=> '旅游订单列表',
            'shops'=> $shops,
            'page'=> $page,
        ]);
        return $this->template();
    }
    //订单查看
    public function eye_order(){
        $oid = input('oid');
        $where = ['s.id'=>$oid];
        $orders = $this->_shop->getShops($where);
        if(!empty($orders)){
            $order = $orders[0];
            $s_where = ['key'=>['in', $order['safes']]];
            $safes =  Db::table('ly_safe')->where($s_where)->select();
            $offer = json_decode($order['offer'],true);
            $where = [ ['id'=>['in',$order['people'] ] ],['style'=>['in',$order['papers'] ] ] ];
            $travels = model('people')->peoples($where);
            $this->assign([
                'order'=>$order,
                'safes'=>$safes,
                'travels' => $travels,
                'offer' => $offer
            ]);
        }else{
            $this->error('您的订单不存在');
        }
        $this->assign([
            'title'=> '旅游订单列表',
//            'shops'=> $shops,
//            'page'=> $page,
        ]);
        return $this->template();
    }
    // 旅游保险
    public function safe(){
        $s_where = [];
        $title = input('title');
        $key = input('key');
        if($title){
            $s_where['title'] = ['like','%'.$title.'%'];
        }
        if ($key){
            $s_where['key'] = ['like','%'.$key.'%'];
        }
        $safes = $this->_safe->getList($s_where);
        $page = $safes->render();
        $this->assign([
            'title'=> '旅游保险列表',
            'safes'=> $safes,
            'page'=> $page,
        ]);
        return $this->template();
    }
    // 旅游保险编辑页面
    public function safe_edit(){
        $id = input('id');
        $act = 'add';
        if(!empty($id)){
            $act = 'update';
            $s_where = ['id'=>$id];
            $safe = $this->_safe->where($s_where)->find();
            if(empty($safe)){
                $this->error('您要编辑的保险不存在！');
            }
            $this->assign([
                'safe'=> $safe,
            ]);
        }
        $this->assign([
            'title'=> '旅游保险列表',
            'act'=> $act,
        ]);
        return $this->template();
    }
    // 保险编辑操作
    public function safeedit(){
        $act = input('act');
        $map = [
            'key'=>input('key'),
            'desc'=>input('desc'),
            'title' => input('title'),
            'price' => input('price'),
            'mid'=> '',
            'must' => input('must')
        ];
        switch ($act){
            case 'add':
                $map['addtime'] = time();
                $result = $this->_safe->insert($map);
                break;
            case 'update':
                $c_where = ['id'=>input('id')];
                $result = $this->_safe->where($c_where)->update($map);
                break;
            default :
                return $this->error('未知操作');
                break;
        }
        if($result){
            $this->success('编辑成功',url('Tourism/safe'));
        }else{
            $this->error('编辑失败');
        }
    }

    // 旅游合同
    public function contract(){
        $c_where = [];
        $title = input('title');
        $key = input('key');
        if($title){
            $c_where['title'] = ['like','%'.$title.'%'];
        }
        if ($key){
            $c_where['key'] = ['like','%'.$key.'%'];
        }

        $contracts = $this->_contract->getList($c_where);
        $page = $contracts->render();
        $this->assign([
            'title'=> '旅游保险列表',
            'contracts'=> $contracts,
            'page'=> $page,
        ]);
        return $this->template();
    }
    // 旅游合同添加
    public function contract_edit(){
        $id = input('id');
        $act = 'add';
        $where = ['a.status'=>2];

        $users = $this->_userinfo->applys($where,['a.addtime'=>'desc'],999999999);

        if(!empty($id)){
            $act = 'update';
            $c_where = ['id'=>$id];
            $contract = $this->_contract->where($c_where)->find();
            if(empty($contract)){
                $this->error('您要编辑的合同不存在！');
            }
            $this->assign([
                'contract'=> $contract,
            ]);
        }
        $this->assign([
            'title'=> '旅游保险列表',
            'users'=> $users,
            'act' => $act
        ]);
        return $this->template();
    }
    // 合同编辑操作
    public function contractedit(){
        $act = input('act');
        $time = time();
        $number = input('number');
        $numbers = explode(' ', $number);
        $maps = [];
        $map = [
            'uid'=>input('uid'),
            'type'=>input('type'),
            'status'=> '0',
            'addtime'=> $time,
        ];
        foreach ($numbers as $number){
            if(empty($number)){
                continue;
            }
            $map['number'] = $number;
            $maps[] = $map;

        }
        switch ($act){
            case 'add':
                $result = $this->_contract->insertAll($maps);
                break;
            case 'update':

                $c_where = ['id'=>input('id')];
                $result = $this->_contract->where($c_where)->update($map);
                break;
            default :
                return $this->error('未知操作');
                break;
        }
        if($result){
            $this->success('编辑成功');
        }else{
            $this->error('编辑成功');
        }
    }
    public function contract_del(){
        $id = input('id');
        $where = ['id'=>$id];
        $result = $this->_contract->where($where)->delete();
        if($result){
            $this->success('编辑成功');
        }else{
            $this->error('编辑成功');
        }
    }
    // 合同审核状态
    public function contract_examine(){
        $id = input('id');
        $where = ['id'=>$id];
        $contract = Db::table('ly_contract')->where($where)->find();
        if(!$contract){
            return $this->error('没有找到合同');
        }
        $this->assign([
            'title'=> '合同审核',
            'contract' => $contract,
        ]);
        return $this->template();
    }
    // 状态编辑
    public function contract_examine_edit(){
        $id = input('id');
        $where = ['id'=>$id];
        $map = ['status'=>input('status')];
        $result = Db::table('ly_contract')->where($where)->update($map);
        if($result){
            return $this->success('编辑成功');
        }else{
            return $this->error('编辑失败');
        }
    }
    // 特价甩尾
    public function flick(){
//        $_flick = model('tripFlick');
        $where = ['apply_flick'=>'1'];
        $trips = $this->_trip->getTrips($where,['addtime'=>'desc']);
        $this->assign([
            'title'=> '特价甩尾审核',
            'trips' => $trips,
        ]);
        return $this->template();
    }
    // 测试小程序
    public function test(){
        $where = [];
        $trips = $this->_trip->where($where)->select();
        foreach ($trips as $trip) {
            $dates = [-1, -1];
            $prices = [-1, -1];
            $offers = json_decode($trip['offer'], true);

            foreach ($offers as $k => $v) {
                $dates = min_max($dates, $k);
                if ($trip['offer_type'] == '2') {
                    $prices = min_max($prices, $v[0]['market']);
                } else {
                    $prices = min_max($prices, $v['adult']);
                }
            }
            $map = [
                'minprice' => $prices[0],
                'maxprice' => $prices[1],
                'ago_date' => $dates[0],
                'after_date' => $dates[1]
            ];
            $result = Db::table('ly_trip')->where('id',$trip['id'])->update($map);
            if($result){
                echo $trip['id'] . ' 行程编辑成功！';
            }else{
                echo $trip['id'] . ' 行程编辑失败！';
            }
        }
    }
}