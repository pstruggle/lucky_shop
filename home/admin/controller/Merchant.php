<?php
namespace app\admin\controller;

use app\admin\controller\Base;
use think\Cache;
use think\Cookie;
use think\Db;
use think\Url;

class Merchant extends Base
{
    private $_merchant;
    private $_bill;

    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->_merchant = model('merchant');
        $this->_bill = model('bill');
    }
    /*
     * 获取商户列表
     * */
    public function merchantlist(){
        $where = [];
        $account = input('account');
        $status = input('status');
        $phone = input('phone');
        if(!empty($account)){
            $where['account'] = $account;
        }
        if($status===0 || !empty($status)){
            $where['status'] = $status;
        }
        if(!empty($phone)){
            $where['phone'] = $phone;
        }
        $merchants = $this->_merchant->getList($where);
        $page = $merchants->render();
        $this->assign([
            'title' => '商户列表',
            'merchants' => $merchants,
            'page' => $page,
        ]);
        return $this->template();
    }
    //查看商户
    public function eye_merchant(){
        $id = input('id');
        $where = ['mid'=>$id];
        $aptitude = Db::name('aptitude')->where($where)->find();
        if(!$aptitude){
            return '您选择的商家还未上传资质';
        }
        $m_where = ['id'=>$id];
        $status = Db::name('merchant')->where($m_where)->value('status');
        $this->assign([
            'title' => '商户资质材料',
            'aptitude'=>$aptitude,
            'status' => $status
        ]);
        return $this->template();
    }
    // 商户提款列表
    public function drawings(){
        $_drawing = model('drawing');
        $where = [];
        $order = ['d.addtime'=>'desc'];
        $drawings = $_drawing->getDrawings($where,$order);
        $this->assign([
            'title' => '商户提款列表',
            'drawings' => $drawings,
        ]);
        return $this->template();
    }
    public function drawing_edit(){
        $_drawing = model('drawing');
        $id = input('id');
        $where = ['d.id'=>$id];
        $drawings = $_drawing->getDrawings($where,[],1);
        if(empty($drawings[0])){
            return $this->error('抱歉，没有该申请！');
        }
        $drawing = $drawings[0];
        $a_where = ['mid'=>$drawing['mid']];
        $aptitude = Db::table('ww_aptitude')->where($a_where)->find();
        if(empty($aptitude)){
            return $this->error('找不到商户的信息');
        }
        $this->assign([
            'title' => '商户提款列表',
            'drawing' => $drawing,
            'aptitude' => $aptitude,
        ]);
        return $this->template();
    }
    //提款编辑
    public function drawingedit(){
        dump(input());
        $map = [
            'status' => input('status')?input('status'):'0',
            'remark' => input('remark')?input('remark'):'',
            'handletime' => time()
        ];
        $where = ['id'=>input('id')];
        try{
            $drawing = Db::table('ww_drawing')->where($where)->find();
            Db::startTrans();
            $result = Db::table('ww_drawing')->where($where)->update($map);

        if($map['status'] == 2){
            $b_map = [];
            $b_map['recorded'] = - $drawing['price'];
            $bill_result = Db::table('ww_bill')->where('id',$drawing['bid'])->update($b_map);
        }elseif($map['status'] == 0){
            $bill_result = $this->_bill->tk_add_bill($drawing['mid'],-$drawing['price']);
        }else{
            Db::rollback();
            return $this->error('操作失败');
        }
        }catch (\Exception $e){
            Db::rollback();
            return $this->error('操作失败');
        }
        if($result && $bill_result){
            Db::commit();
            return $this->success('操作成功');
        }else{
            return $this->error('操作失败');
        }
    }
    //编辑商户信息
    public function merchant_edit(){
        $status = input('status');
        $mid = input('mid');
        $where = ['id'=>$mid];
        $map = [];
        if(!empty($status)){
            $map['status'] = $status;
        }
        $result = Db::name('merchant')->where($where)->update($map);
        if($result){
            $aliyun = controller('api/Aliyun');
            $merchant = Db::name('merchant')->where($where)->find();
            $data['recNum'] = $merchant['phone'];
            $data['temp'] = 'sms_status';
            if($status == '2'){
                $data['param'] = [$merchant['name'],'商户资格','通过'];
            }else{
                $data['param'] = [$merchant['name'],'商户资格','未通过，请重新提交资料'];
            }
            $sms_result = $aliyun->ajax_send($data);
            $this->success('编辑成功', 'merchant/merchantlist');
        }else{
            $this->error('编辑失败', 'merchant/merchantlist');
        }
    }
    /*
     * 添加商户
     * */
    public function merchantedit(){
        $act = input('act');
        $id = input('id');
        if(!empty($act)){
            $errors = ['code'=>1];
            $map = [];
            $map['account'] = input('account');
            $map['name'] = input('name');
            $map['phone'] = input('phone');
            $map['email'] = input('email');
            $map['province'] = input('province');
            $map['city'] = input('city');
            $map['county'] = input('county');
            $map['expire'] = input('expire');
            $map['status'] = input('status');
            $map['sign'] = input('sign');
            $map['auth'] = input('auth');
            $map['addtime'] = time();
            if(strcmp($act,'add') === 0){
                $map['passwd'] = input('passwd')?input('passwd'):'88888888';
                $result = $this->_merchant->merchantAdd($map);
                if($result['code'] == 0){
                    $this->error($result['info']);
                }
                $errors['info'] = '编辑成功';
                $this->success($errors['info']);
            }elseif(strcmp($act,'update') === 0){
                $passwd = input('passwd');
                if(!empty($passwd)){
                    $map['passwd'] = $passwd;
                }
                $f_where = [
                    'id'=> ['notin',$id],
                    'phone' => $map['phone'],
                ];
                $merchant = Db::name('merchant')->where($f_where)->find();
                if(!empty($merchant)){
                    $this->error('该手机号码已经注册！');
                }
                $result = $this->_merchant->merchantMod($map,$id);
                if($result['code'] == 0){
                    $this->error($result['info']);
                }
                $errors['info'] = '修改成功';
                $this->success($errors['info']);
            }else{
                $this->error('操作错误！');
            }
        }else{
            $act = 'add';
        }
        if(!empty($id)){
            $act = 'update';
            $merchant = $this->_merchant->getList(['id'=>$id]);
            $this->assign('merchant',$merchant[0]);
        }

        $this->assign([
            'title' => '商户编辑',
            'act'   => $act,
            'id'    => $id
        ]);
        return $this->template();
    }
    /*
     * 商户的删除
     * */
    public function merchantdel($id){
        $this->_merchant->del();
    }
    /*
     * 账单列表
     * */
    public function bill(){
        $mid = input('mid');
        $onumber = input('onumber');
        $where = [];
        $order = ['addtime'=> 'desc'];
        if(!empty($mid)){
            $where['mid'] = $mid;
        }
        if(!empty($onumber)){
            $where['onumber'] = ['like','%'.$onumber.'%'];
        }
        $m_where = ['status'=>2];
        $merchants = $this->_merchant->where($m_where)->select();
        $bills = $this->_bill->getBills($where,$order);
        $page = $bills->render();
        $this->assign([
            'title' => '账单列表',
            'bills' => $bills,
            'page' => $page,
            'merchants' => $merchants,
        ]);
        return $this->template();
    }
    //账单详情
    public function bill_desc(){
        $id = input('bill');
        $where = ['id'=>$id];
        $bill = $this->_bill->getBill($where);
        if(empty($bill['order'])){
            return '<h1>特殊订单</h1>';
        }
        $this->assign([
            'title' => '账单详情',
            'bill' => $bill,
        ]);
        return $this->template();

    }
    /*
     * 管理员直接访问商户官网
     * */
    public function visit($id){
        $where = ['id' => $id];
        $merchants = $this->_merchant->getList($where);
        $merchantinfo = $merchants[0];
        $mprefix = config('cookie.mprefix');
        Cookie::set('account',$merchantinfo['account'],['prefix'=>$mprefix,'expire'=>3600]);
        Cookie::set('passwd',$merchantinfo['passwd'],['prefix'=>$mprefix,'expire'=>3600]);
        Cookie::set('check','merchant',['prefix'=>$mprefix,'expire'=>3600]);
        Url::root('/merchant.php');
        $this->redirect('/index/index');

    }
}