<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/10/10
 * Time: 10:25
 */

namespace app\index\controller;


use think\Db;

class Goods extends Base
{
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub

    }
    // 商品详情
    public function details(){
        $id = input('id');
        $where = ['goods_id' => $id];
        $_goods = model('goods');
        $good = $_goods->get_good($where);
        if(empty($good)){
            return $this->error($_goods->getError(),'index/index/index');
        }
        $assign = $good;
        $assign['title'] = $good['good']['goods_name'] . '_' . get_cache('config.mall')['store_title'];
        $this->assign($assign);
        return $this->template();
    }
    // 获取商品规格
    public function specs(){
        $goods_id = input('good_id');
        $_goods = model('goods');
        $specs = $_goods->get_specs($goods_id);
        return $this->type== 'json'?json($specs):$specs;
    }
    // 获取商品规格组
    public function spec_group(){
        $goods_id = input('good_id');
        $where = ['goods_id'=>$goods_id];
        $spec_groups = Db::name('spec_group')->where($where)->select();
        return $this->type== 'json'?json($spec_groups):$spec_groups;
    }
    // 异步验证规格组是否还存在库存
    public function ajax_spec_store(){
        $specs = input('specs/a');
        $good_id = input('goods_id');
        if(!empty($specs)){
            $specs = implode(',',$specs);
            $where = ['goods_id'=>$good_id,'specs'=>$specs];
            $spec = Db::name('spec_group')->where($where)->find();
        }else{
            $where = ['goods_id'=>$good_id];
            $good_store = Db::name('goods')->where($where)->value('store_count');
            $spec = ['store_count'=>$good_store];
        }
        return $this->type=='json'?json($spec):$spec;
    }
    // 购物车页面控制器
    public function shop_cart(){
        $assign = ['title'=>'我的购物车'];
        $this->assign($assign);
        return $this->template();
    }
    // 异步加入购物车
    public function cart(){
        // 未登录的状态 code == 9
        $data = input('post.');
        $data['uid'] = $this->user['id'];
        $_cart = model('cart');
        $create_id = $_cart->create_cart($data);
        $error = [];
        if(empty($create_id)){
            $error['code'] = 1;
            $error['info'] = '编辑失败，请稍后再试';
        }else{
            $error['code'] = 0;
            $error['info'] = '编辑成功';
        }
        return $this->type=='json'?json($error):$error;
    }
    // 购物车
    public function carts(){
        $where = [
            'uid'=>$this->user['id'],
            'order_id' => '0',
        ];
        $cart_id = input('cart_id');
        if(!empty($cart_id)){
            $where['id'] = $cart_id;
        }
        $limit = input('limit');
        $_cart = model('cart');
        $carts = $_cart->get_carts($where,[],$limit);
        return $this->type=='json'?json($carts):$carts;
    }
    // 购物车删除
    public function del_cart(){
        $cart_id = input('cart_id');
        $where = ['uid'=>$this->user['id'],'id'=>$cart_id];
        $result = model('cart')->del_cart($where);
        if($result){
            // 删除成功
            $error['code'] = 0;
            $error['info'] = '编辑成功';
        }else{
            // 删除失败
            $error['code'] = 1;
            $error['info'] = '编辑失败，请稍后再试';
        }
        return $this->type=='json'?json($error):$error;
    }
    // 购物车移动到收藏夹
    public function move_favorite(){
        $data = input('post.');
        $data['uid'] = $this->user['id'];
        $_cart = model('cart');
        $result = $_cart->move_favorite($data);
        if(empty($result)){
            // 删除失败
            $error['code'] = 1;
            $error['info'] = '编辑失败，请稍后再试';
        }else{
            $error['code'] = 0;
            $error['info'] = '编辑成功';
        }
        return $this->type=='json'?json($error):$error;
    }
}