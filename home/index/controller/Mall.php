<?php
namespace app\index\controller;
use app\index\controller\Base;
use think\Cookie;
use think\Db;
use think\Request;
use think\Session;
use think\Url;

class Mall extends Base
{
    private $_malltypes;
    private $_goods;
    private $_cart;
    private $_address;
    private $_orders;
    private $_ad;
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->_malltypes = model('malltypes');
        $this->_goods = model('goods');
        $this->_cart = model('cart');
        $this->_address = model('address');
        $this->_orders = model('orders');
        $this->_ad = model('ad');
    }
    // 商城首页
    public function index(){
        $types = $this->_malltypes->getList(['fid'=>0,'status'=>'1'],['weight'=>'desc','id'=>'asc']);
        $location = $this->location;
        $hots = $this->_goods->getUGoods(1,$location);
        $news = $this->_goods->getUGoods(2,$location);
        $sales = $this->_goods->getUGoods(3,$location);
        $cartnum =  $this->_cart->where(['uid'=>$this->userinfos['id'],'status'=>1])->sum('sum');
        $ads = $this->_ad->getAdByKey('mall_top',5);
        $this->assign([
            'title' => '小惠猫-商城首页',
            'types' => $types,
            'hots'  => $hots,
            'news'  => $news,
            'sales' => $sales,
            'ads'   => $ads,
            'cartnum' => $cartnum,
        ]);
        return $this->template();
    }
    // 商品分类
    public function category(){
        $types = $this->_malltypes->getList(['fid'=>0],['weight'=>'desc','id'=>'asc']);
        $this->assign([
            'title' => '小惠猫-商品分类',
            'types' => $types,
        ]);
        return $this->template();
    }
    //商品列表
    public function product_list(){
        $fid = input('fid');
        $tid = input('tid');
        $search = input('search');
        $cartnum =  $this->_cart->where(['uid'=>$this->userinfos['id'],'status'=>1])->sum('sum');

        $where = [
            'status' => '1'
        ];
        if(!empty($search)){
            $where['tradename'] = ['like','%'.$search.'%'];
        }
        if(!empty($fid)){
            $where['fmalltype'] = $fid;
        }
        if(!empty($tid)){
            $where['malltype'] = $tid;
        }
        $goods = $this->_goods->getGoodsList($this->location,$where,['g.addtime'=>'desc']);
        $this->assign([
            'title' => '小惠猫-商品列表',
            'goods' => $goods,
            'cartnum' => $cartnum,
        ]);

        return $this->template();
    }
    //商品的详情
    public function product(){
        $id = input('id');
        $where = [
            'id' =>$id,
            'status' => '1'
        ];
        $good = $this->_goods->getList($where);
        $cartnum =  $this->_cart->where(['uid'=>$this->userinfos['id'],'status'=>1])->sum('sum');
        if(empty($good[0])){
            $this->error('没有找到该商品');
        }
        $this->assign([
            'title' => '小惠猫-商品详情',
            'good' => $good[0],
            'cartnum' => $cartnum,
        ]);
        return $this->template();
    }
    //购物车
    public function cart(){
        $uid = $this->userinfos['id'];
        $where = ['c.uid'=>$uid,'c.status'=>1];
        $carts = $this->_cart->getCarts($where);
        $this->assign([
            'title' => '小惠猫-购物车',
            'carts' => $carts,
        ]);
        return $this->template();

    }
    // 订单确认
    public function confirm_order(){
        $where = ['uid'=>$this->userinfos['id']];
        $oid = input('oid');//订单ID
        $aid = input('aid');
        if(!empty($oid)){
            $owhere = ['id'=>$oid,'status'=>1];
            $order = $this->_orders->where($owhere)->find();
            if(!$order){
                $this->error('订单已支付，或正在操作中...',url('Mall/order_list'));
            }
            $gids = $this->_cart->where(['oid'=>$oid])->column('id');
            $str = implode(',',$gids);
            $cart['c.status'] = 2;

            $this->assign(['type'=>'order','oid'=>$oid]);
        }else{
            $carts = input('cartid/a');
            if(empty($_SESSION['cartid']) && !empty($carts) && is_array($carts)){
                $str = implode(',',$carts);
            }else{
                $str = Session::get('cartid');
            }
            $cart['c.status'] = 1;
            $this->assign('type','cart');
        }
        if(empty($aid)){
            $where['default'] = 1;
        }else{
            $where['id'] = $aid;
        }
        $address = $this->_address->getList($where,[],1);
        if(!empty($str)){
            Session::set('cartid',$str);
            $cart['c.id'] = ['in',$str];
            $carts = $this->_cart->getCarts($cart);
            $sumprice = $this->_cart->getSumPrice($cart);
            $this->assign([
                'carts' => $carts ,
                'sumprice' => $sumprice
            ]);
        }else{
            return $this->error('没有找到您想要购买的商品！',url('Mall/index'));
        }
        if(empty($address[0])){
            $address = [];
        }else{
            $address = $address[0];
        }
        $this->assign([
            'title' => '订单确认',
            'address' => $address,
        ]);
        return $this->template();
    }
    //我的地址列表
    public function addresslist(){
        $where = ['uid'=>$this->userinfos['id']];
        $addresslist = $this->_address->getList($where);
        $this->assign([
            'title' => '地址列表',
            'addresslist' => $addresslist,
        ]);

        return $this->template();
    }
    //地址信息
    public function address(){
        $act = 'add';
        $id = input('id');
        if(!empty($id)){
            $act = 'mod';
            $where = ['uid'=>$this->userinfos['id'],'id'=>$id];
            $address = $this->_address->where($where)->find();
            $this->assign([
                'address' => $address
            ]);
        }
        $this->assign([
            'title' => '地址信息添加（修改）',
            'act' => $act,
        ]);
        return $this->template();
    }
    // 订单支付状态
    public function return_state(){
        $oid = input('oid');
        $status = input('status');
        $type = input('type');
        if(empty($oid)){
            $this->error('您的操作失误');
        }
        $where = ['id'=>$oid];
        if($type == 'ly'){
            $order = Db::table('ly_shop')->where($where)->find();
        }elseif($type == 'mp'){
            $order = Db::table('ly_ticket_order')->where($where)->find();
        }elseif($type == 'qz'){
            $order = Db::table('ly_visa_order')->where($where)->find();

        }else{
            $order = $this->_orders->where($where)->find();
        }
        if(empty($order)){
            $this->error('订单不存在');
        }

        $this->assign([
            'title' => '支付状态',
            'order' => $order,
            'status' => $status,
        ]);
        return $this->template();
    }
    // 订单列表
    public function order_list(){
        $this->assign([
            'title' => '订单列表',
        ]);
        return $this->template();
    }
    // 常购清单
    public function favorite(){
        $this->assign([
            'title' => '',
        ]);

        return $this->template();
    }
    //我的位置
    public function location(){
        $this->assign([
            'title' => '我的位置',
        ]);

        return $this->template();
    }
    //搜索
    public function search(){
        $this->assign([
            'title' => '',
        ]);

        return $this->template();
    }
    //订单支付方式选择页面
    public function order_pay(){
        $oid  = input('oid');
        $this->assign([
            'title'=>'选择支付方式',
            'oid'=>$oid,
        ]);
        return $this->template();
    }
    //页面权限
    private function auth(){

    }
    // 异步获取子分类
    public function ajax_types(){
        $id = input('id');
        $types = $this->_malltypes->getList(['fid'=>$id,'status'=>'1'],['weight'=>'desc','id'=>'asc']);
        return json_encode($types,JSON_UNESCAPED_UNICODE);
    }
    // 异步加入购物车
    public function ajax_cart(){
        $gid = input('gid');
        $edit = input('action')?input('action'):'+';
        $error = ['code'=>'1'];
        $uid = $this->userinfos['id'];
        if(empty($uid)){
            $error['code']  = -1;
            $error['info']  = '请先登录！';
            $error['url']   = url('User/login');
            return json_encode($error);
        }
        $where = [
            'id' =>$gid,
            'status' => '1'
        ];
        $good = $this->_goods->where($where)->find();
        if(empty($good)){
            $error['code'] = 0;
            $error['info'] = '没有找到该商品或商品已下架！';
            return json_encode($error);
        }
        $wheres = ['uid'=>$uid,'status'=>1,'gid'=>$good['id']];
        $count = $this->_cart->where($wheres)->count();
        if($count > 0){
            if ($edit == '-'){
                $result = $this->_cart->where($wheres)->setInc('sum',-1);
            }else{
                $result = $this->_cart->where($wheres)->setInc('sum',1);
            }
            $error['sum'] = $this->_cart->where($wheres)->value('sum');
            if($error['sum'] == 0){
                $this->_cart->where($wheres)->delete();
            }
        }else{
            $map = [
                'gid'   => $good['id'],
                'uid'   => $uid,
                'oid'   => '0',
                'sum'   => 1,
                'spec'  => $good['specs'],
                'status' => '1',
                'addtime' => time(),
            ];
            $result = $this->_cart->addCart($map);
        }
        $num = $this->_cart->where(['status' => '1','uid'=>$uid])->sum('sum');
        $error['num'] = $num;
        if(!$result){
            $error['code'] = 0;
            $error['info'] = '添加购物车失败';
        }
        return json_encode($error);
    }
    //异步删除购物车
    public function ajax_del_cart(){
        $id = input('id');
        $error = ['code' => '1'];
        $where = ['uid'=>$this->userinfos['id'],'status'=>1,'id'=>$id];
        if(!$this->_cart->where($where)->delete()){
            $error['code'] = 0;
            $error['info'] = '删除失败';
        }
        return json_encode($error);
    }
    // 添加地址信息
    public function add_address(){
        $act = input('act');
        $id = input('id');
        $uid = $this->userinfos['id'];
        $map = [
            'uid' => $uid,
            'consignee' => input('consignee')?input('consignee'):'',
            'phone'     => input('phone')?input('phone'):'',
            'province'  => input('province')?input('province'):'',
            'city'      => input('city')?input('city'):'',
            'county'   => input('county')?input('county'):'',
            'address'   => input('address')?input('address'):'',
            'default'   => input('default')?input('default'):'0',
        ];
        if($map['default'] == '1'){
            $where = ['uid'=>$uid];
            $mods = ['default' => '0'];
            $address = $this->_address->where($where)->find();
            if(!empty($address)){
                Db::name('address')->where($where)->update($mods);
            }
        }
        if(strcmp($act,'add') === 0){
            $result = $this->_address->addAddress($map);
        }else{
            $where = ['uid'=>$uid,'id'=>$id];
            $result = $this->_address->addAddress($map,$where);
        }

        if ($result){
            return $this->redirect("Mall/addresslist");
        }else{
            return $this->error('添加错误');
        }
    }
    //异步获取订单
    public function ajax_order(){
        $type = input('type');
        $where = ['uid'=>$this->userinfos['id'],'del'=>'0'];
        switch ($type){
            case '0':
                //所有订单
                break;
            case '1':
                $where['status'] = '1';
                break;
            case '2':
                $where['status'] = '2';
                $where['delivery_status'] = '1';
                break;
            case '3':
                $where['status'] = '2';
                $where['delivery_status'] = '2';
                break;
            case '4':
                $where['status'] = '2';
                $where['delivery_status'] = '3';
        }
        $orders = $this->_orders->getOrder($where);
        $this->assign($orders);
        return $this->template();
    }
    //删除订单
    public function order_del(){
        $oid = input('oid');
        $where = ['id' => $oid,'uid' => $this->userinfos['id'],'status'=>['in','0,1']];
        $map = ['del'=>1];
        $result = $this->_orders->editOrder($map,$where);
        if($result){
            $this->success('删除成功!','Index/order_list');
        }else{
            $this->error('删除失败!','Index/order_list');

        }
    }
    //提交订单处理
    public function place_order(){
        $pay     = input('pay');        //支付方式
        $type = input('type');
        if($type == 'order'){
            $oid = input('oid');
        }else{
            $data = [];
            $data['addressid'] = input('address');    //收货地址
            $data['carts'] = input('cartid/a');   //购物车id
            $data['remarks'] = input('remarks');    //备注
            $data['uid']     = $this->userinfos['id'];
            $data['carts'] = implode(',',$data['carts']);
            //  订单表，积分表 支付表
            $result = $this->_orders->orders($data);
            if($result['code'] == '0'){
                $this->error($result['info']);
            }
            $oid = $result['oids'][0];
        }
        switch ($pay){
            case '1' :
                //微信支付
                $url = urlencode(url('Mall/cart'));
                $redurl = $this->request->domain() . '/api.php/wepay/wxpay.html?oid='.$oid.'&url='.$url;
                $this->redirect($redurl);
                break;
        }
    }

    // 订单支付成功///暂时不需要的
    public function order_success(){
        $oid = input('oid');
        $ment = input('ment');
        $where = ['id'=>$oid];
        $order = $this->_orders->getList($where,[],1);
        $error = ['code'=>1,'info'=>'支付成功'];
        if(count($order)<=0){
            $error['code'] = 0;
            $error['info'] = '订单不存在';
        }
        $map = [
            'status'=> 2,
            'paytime'=>time(),
            'payment'=>$ment,
        ];
        $result = $this->_orders->editOrder($map,$where);
        if(!$result){
            $error['code'] = 0;
            $error['info'] = '订单修改失败，请联系管理员确认！';
        }
        return json_encode($error);
    }

}