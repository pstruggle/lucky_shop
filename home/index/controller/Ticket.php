<?php
namespace app\index\controller;

use think\Db;

class Ticket extends Base
{
    private $_ticket;
    private $_ticketOrder;
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->_ticket = model('ticket');
        $this->_ticketOrder = model('ticketOrder');
    }
    //门票列表
    public function ticket_list(){
        $this->assign([
            'title' => '门票列表',
        ]);
        return $this->template();
    }
    //异步获取门票列表信息
    public function ajax_ticket(){
        $where = $this->_ticket->getWhere();
        $tickets = $this->_ticket->getTickets($where);
        $this->assign('tickets',$tickets);
        return $this->template();
    }
    // 门票详情
    public function details(){
        $ticket = $this->_ticket->getTicket();
        if(empty($ticket)){
            $this->error('门票不存在',url('Index/index'));
        }
        if($this->userinfos['type'] == '1'){
            $op = Db::name('userinfo')->where('id',$this->userinfos['op'])->find();
            $this->assign('op',$op);
        }
        $this->assign([
            'title' => !empty($ticket['title'])?$ticket['title']:'小惠猫-门票详情',
            'ticket' => $ticket,
        ]);
        return $this->template();
    }
    // 预定购票
    public function pricecalendar(){
        $pid = input('pid');
        $tid = input('tid');
        $ticket = $this->_ticket->where('id',$pid)->find();
        if (empty($ticket)){
            return $this->error('门票不存在');
        }
        $ticket_type = Db::table('ly_ticket_type')->where(['id'=>$tid,'tid'=>$pid])->find();
        if (empty($ticket_type)){
            return $this->error('门票类型不存在');
        }

        $this->assign([
            'title' => !empty($ticket['title'])?$ticket['title']:'小惠猫-门票详情',
            'ticket' => $ticket,
            'ticket_type' => $ticket_type,
        ]);
        return $this->template();
    }
    // 选择支付方式
    public function order_pay(){
        $oid  = input('oid');
        $s_where = ['id'=>$oid,'uid'=>$this->userinfos['id']];
        $ticket_order = Db::table('ly_ticket_order')->where($s_where)->find();
        $this->assign([
            'title'=>'选择支付方式',
            'ticket_order'=>$ticket_order,
            'oid'=>$oid,
        ]);
        return $this->template();
    }
    public function pay(){
        $oid = input('oid');
        $type = input('type');
        $pay = input('pay');
        switch ($pay){
            case '1' :
                //微信支付
//                $url = urlencode(url('Mall/cart'));
                $redurl = $this->request->domain().'/api.php/wepay/wxpay.html?oid='.$oid.'&type='.$type;
                $this->redirect($redurl);
                break;
        }
    }
    //门票订单
    public function ajax_order(){
        $type = input('type');
        $where = ['uid'=>$this->userinfos['id']];
        switch ($type){
            case '0':
                $where['pay_status'] = ['notin','0'];
                //所有订单
                break;
            case '1':
                $where['pay_status'] = '1';
                break;
            case '2':
                $where['pay_status'] = '2';
                $where['confirm'] = '1';
                break;
            case '3':
                $where['pay_status'] = '2';
                $where['confirm'] = '2';
                break;
            default :
                $where['pay_status'] = ['notin','0'];
                break;

        }
        $orders = $this->_ticketOrder->getOrders($where);
        $this->assign('orders',$orders);
        return $this->template();
    }
    //删除订单
    public function order_del(){
        $oid = input('oid');
        $where = ['id' => $oid,'uid' => $this->userinfos['id'],'pay_status'=>['in','0,1']];
        $map = ['del'=>1];
        $result = $this->_ticketOrder->where($where)->delete();
        if($result){
            $this->success('删除成功!','Index/order_list');
        }else{
            $this->error('删除失败!','Index/order_list');

        }
    }

    //生成订单
    public function confirm(){
        $prompt = ['code'=>1,'info'=>''];
        $dates = input('dates');
        $pid = input('pid');
        $tid = input('tid');
        $man = input('man');
        $contact_name = input('contact_name');
        $contact_phone = input('contact_phone');
        $contact_card = input('contact_card');
        $ticket = $this->_ticket->where('id',$pid)->find();
        if(empty($ticket)){
            $prompt['info'] = '没有找到该门票';
            return false;
        }
        $ticket_type = Db::table('ly_ticket_type')->where(['id'=>$tid,'tid'=>$pid])->find();
        if(empty($ticket_type)){
            $prompt['info'] = '没找到票务类型';
            return json_encode($prompt,JSON_UNESCAPED_UNICODE);
        }
        $time = strtotime($dates);
        $offers = json_decode($ticket_type['offer'],true);
        $offer = $offers[date('Ymd',$time)];
        if(empty($offer)){
            $prompt['info'] = '没有找到该门票';
            return json_encode($prompt,JSON_UNESCAPED_UNICODE);
        }
        $take = $this->userinfos['clerk'] == '1'?getCache('take')['core_take']:getCache('take')['salesman_take'];
//        $price = $man * ($offer['discount'] + ($offer['market']-$offer['discount']) * $take / 100);
        $price = $man * ($offer['discount'] + ($offer['discount']) * $take / 100);
        $map = [
            'uid' => $this->userinfos['id'],
            'mid' => $ticket['mid'],
            'ticket' => $pid,
            'ticket_type_id' => $tid,
            'ticket_type' => json_encode($ticket_type),
            'onumber' => serial(),
            'dates' => $time,
            'sum' => $man,
            'discount' => $price,
            'unit_price' => $offer['discount'],
            'confirm' => '1',
            'pay_status' => '1',
            'contact_name' => $contact_name,
            'contact_phone' => $contact_phone,
            'contact_card' => $contact_card,
            'offer' => json_encode($offer,JSON_UNESCAPED_UNICODE),
            'addtime' =>time()
        ];
        try{
            $result = Db::table('ly_ticket_order')->insert($map);

        }catch (\Exception $e){
            $prompt['info'] = '订单创建失败，请稍后再试';
            return json_encode($prompt,JSON_UNESCAPED_UNICODE);
        }
        if($result){
            $oid = Db::table('ly_ticket_order')->getLastInsID();
            $prompt['code'] = 0;
            $prompt['oid'] = $oid;
            return json_encode($prompt,JSON_UNESCAPED_UNICODE);
        }else{
            $prompt['info'] = '订单创建失败，请稍后再试';
            return json_encode($prompt,JSON_UNESCAPED_UNICODE);
        }
    }
}