<?php

namespace app\push\controller;

use think\worker\Server;

class Worker extends Server
{
    protected $socket = 'websocket://wenwen.xhmlxw.com:2346';
    protected $workers = [];
    protected $users = array();
    protected $merchants = array();
    /**
     * 初始化
     * */
    protected function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->worker->count = 1;
    }

    /**
     * 收到信息  当有客户端的连接上有数据发来时触发
     * @param $connection
     * @param $data
     */
    public function onMessage($connection, $data)
    {
        $jdata = json_decode($data,true);
        $info = ['code'=>'1','info'=>'没有找到对象'];
        if(!empty($jdata['direction']) && $jdata['direction'] == '1'){
            // 用户向商户发送消息
            if(!empty($jdata['open'])){
                $connection->uid = $jdata['uid'];
                $this->users[ $connection->uid ] = $connection;
                $info['info'] = '添加成功' . $jdata['uid'];
                $connection->send(json_encode($info));
            }else{
                $map = $jdata;
                $map['addtime'] = time();
                if(isset($this->merchants[ $jdata['mid'] ])) {
                    $map['status'] = '0';
                    $this->merchants[$jdata['mid']]->send(json_encode($jdata));
                }else{
                    $map['status'] = '1';
                    $connection->send(json_encode($info));
                }
                model('message')->insert($map);
            }
        }elseif(!empty($jdata['direction']) && $jdata['direction'] == '2'){
            // 商户向用户发送消息
            if(!empty($jdata['open'])){
                $connection->mid = $jdata['mid'];
                $this->merchants[ $connection->mid ] = $connection;
                $info['info'] = '添加成功' . $jdata['mid'];
                $connection->send(json_encode($info));
            }else{
                $map = $jdata;
                $map['addtime'] = time();
                if(isset($this->users[ $jdata['uid'] ])){
                    $map['status'] = '0';
                    $this->users[ $jdata['uid'] ] -> send(json_encode($jdata));
                }else{
                    $map['status'] = '1';
                    $connection -> send(json_encode($info));
                }
                model('message')->insert($map);

            }
        }else{
            $info['info']='您发送的消息错误';
            $connection->send(json_encode($info));
        }
//        $data = $connection->worker->connections;
//        $connection->send($connection->getRemotePort());

    }

    /**
     * 当连接建立时触发的回调函数
     * @param $connection
     */
    public function onConnect($connection)
    {



    }

    /**
     * 当连接断开时触发的回调函数
     * @param $connection
     */
    public function onClose($connection)
    {
        if(isset($connection->uid)){
            echo $connection->uid."\n";

        }
        if(isset($connection->mid)){
            unset($this->merchant[$connection->mid]);
            echo $connection->mid."\n";

        }

    }

    /**
     * 当客户端的连接上发生错误时触发
     * @param $connection
     * @param $code
     * @param $msg
     */
    public function onError($connection, $code, $msg)
    {
        echo "error $code $msg\n";
    }

    /**
     * 每个进程启动
     * @param $worker
     */
    public function onWorkerStart($worker)
    {
        echo "Worker starting...\n";

    }
    /**
     * 向每个客户端发送广播
     * @param $worker
     * */
    public function onWorkerReload($worker)
    {
        $worker->connections;

    }
    /**
     * Workert 停止时回调
     * @param $worker
     * */
    public function onWorkerStop($worker)
    {
        echo "Worker stopping...\n";
    }
}
