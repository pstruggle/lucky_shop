<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/10/17
 * Time: 9:20
 */

namespace app\common\model;


use think\Db;

class Cart extends Base
{
    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }
    public function setCache($having=''){
        $name = lcfirst($this->name);
        $where = ['order_id'=>0];
        $counts = $this->field(['uid','count(id) count'])->where($where)->group('uid')->having($having)->select();
        foreach ($counts as $count){
            get_cache($name.'.count_'.$count['uid'],$count['count']);
        }
    }
    // 添加购物车操作
    public function create_cart($data){
        // good_id uid
        $field = ['goods_id','goods_name','original_img','shop_price','market_price','goods_sn','shipping_area_ids freight'];
        $good = Db::name('goods')
            ->where('goods_id',$data['good_id'])
            ->field($field)
            ->find();
        if(empty($good)){
            $this->error = '商品不存在';
            return false;
        }
        $good['freight'] = get_cache('logistics')[$good['freight']]['price'];
        if( !empty($data['spec_group']) ){
            $spec_field = ['id spec_group', 'specs_name', 'shop_price', 'market_price','goods_sn' ];
            $spec_group = Db::name('spec_group')
                ->where('id',$data['spec_group'])
                ->field($spec_field)
                ->find();
            $good = array_merge($good,$spec_group);
        }
        $good['uid'] = $data['uid'];
        $good['sum'] = $data['sum'];
        $good['addtime'] = time();
        $where = [];
        if(!empty($data['cart_id'])){
            $where['id'] = $data['cart_id'];
        }else{
            $having = 'uid = '.$data['uid'];
            $this->setCache($having);
        }
        $result = $this->save($good,$where);
        if($result){
            return $this->getLastInsID()?$this->getLastInsID():$data['cart_id'];
        }
        return false;
    }
    // 购物车列表
    public function get_carts($where=[],$order=[],$page = 10){
        $carts = $this->where($where)->order($order)->paginate($page);
        $temp = [];
        foreach ($carts as $cart){
            $temp[$cart['id']] = $cart;
        }
        return $temp;
    }
    // 删除购物车
    public function del_cart($where){
        $result = $this->where($where)->delete();
        $having = '';
        if(!empty($where['uid'])){
            $having .= 'uid = '.$where['uid'];
        }
        if(empty($result)){
            return false;
        }
        $this->setCache($having);
        return true;
    }
    // 加入收藏夹
    public function move_favorite($data){
        // ['uid'=>'','goods_id'=>'']

        $field = ['goods_name','goods_id','original_img', 'shop_price','market_price'];
        $good = Db::name('goods')->where('goods_id',$data['goods_id'])->field($field)->find();
        if(empty($good)){
            $this->error = '该商品不存在';
            return false;
        }
        $_favorite = Db::name('favorite');
        $f_where = ['uid'=>$data['uid'],'goods_id'=>$data['goods_id']];
        $is_fav = $_favorite->where($f_where)->find();
        if(!empty($is_fav)){
            return true;
        }
        $map = ['uid' => $data['uid'], 'last_time' => time()];
        $map = array_merge($map,$good);
        $favorite = $_favorite->insert($map);
        if(empty($favorite)){
            $this->error = '加入收藏夹失败';
            return false;
        }
        return true;
    }
    // 修改商品删除购物车，并删除订单
    public function good_del_cart($goods_id=''){
        $where = ['goods_id'=>$goods_id];
        $carts = $this->where($where)->value('order_id');
        $o_where = ['id'=>['in',$carts],'pay_status'=>'0'];
        $order = Db::name('orders')->where($o_where)->select();
        
        dump($order);
    }
}