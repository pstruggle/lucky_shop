<?php
namespace app\common\model;

use app\common\model\Base;
use think\Cookie;
use think\Db;
use think\Exception;
use think\exception\HttpException;
use think\Request;

class Users extends Base
{
    protected $autoWriteTimestamp = true;
    private $_user ;
    private $infos = [
        'nickname' => '该用户名存在',
        'phone' => '该手机号码已经注册',
        'email' => '该邮箱已经注册',
    ];
    protected function initialize(){
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->_user = $this;
        $this->_base = $this;
    }
    /**
     * 验证用户登录情况
     * @return mixed 用户存在就返回用户信息，不存在返回false
     */
    public function check_login(){
        $cookie_id = Cookie::get('token');
        $cookie_secret = Cookie::get('secret');
        $key = get_cache('config.basic')['encrypt_key'];
        $id = authcode($cookie_id,$key,'D');
        $passwd = authcode($cookie_secret,$key,'D');
        $user  = $this->where('id',$id)->find();
        if(empty($user)){
            return false;
        }
        if(strcmp($passwd,$user['passwd']) !== 0){
            throw new Exception('密码被修改,请重新登陆！',100);
        }
        $user = $user->toArray();
        $field = "group_id,role_id,firstdate,overdate,islock,status";

        $admin = model('admin')->where('uid',$id)->field($field)->find();
        if ($admin){
            $user = array_merge($user,$admin->toArray());
        }
        $field = "user_group_id,user_role_id,uid";
        $userinfo = model('userinfo')->where('uid',$id)->field($field)->find();
        if ($userinfo){
            $user = array_merge($user,$userinfo->toArray());
        }
        return $user;
    }
    /**
     * 验证用户权限
     */
    public function auth($module,$controller,$action,$route=[]){
        $basic = get_cache('config.basic');
        try{
            $user = $this->check_login();
            $admin_role = $basic['admin_role'];
            $_action = model('action');
            $where = [
                'controller'=>$module,
                'model'=>$controller,
                'action'=>$action,
            ];
            if (!empty($route)){
                $where['params'] = key($route).'/'.$route[key($route)];
            }
            if(!$user){
                $actions = $_action->where($where)->find();
            }else{
                $action_ids = $_action->where($where)->column('id');
                if(!$action_ids){
                    throw new HttpException(404,'页面不存在');
                }
                $user_role_id = empty($user['user_role_id'])?$basic['initial_role']:$user['user_role_id'];
                $admin_role_info = get_cache('roles.role_'.$user['role_id']);
                $user_role_info = get_cache('roles.role_'.$user_role_id);
                $admin_roles = explode(',',$admin_role_info['auths']);
                $user_roles = explode(',',$user_role_info['auths']);
                $roles = array_merge($admin_roles,$user_roles);
                $auth_id = array_intersect($action_ids,$roles);
                $where = $auth_id?array_merge($where,['id'=>['in',$auth_id]]):$where;
                $actions = $_action->where($where)->find();
            }
            //判断功能是否需要登录
            if(!$actions['is_login']){
                return $user?$user:true;
            }
            // 用户信息为空
            if(!$user){
                throw new Exception('请先登录',100);
            }
            if(!$user['is_admin'] && !$actions['is_nose']){
                //  非管理员请求后台功能
                throw new Exception('请求异常',101);
            }
            if($actions['is_nose']&&!in_array($actions['id'],$user_roles)){
                // 不在权限范围内
                throw new Exception('您没有权限访问',102);
            }
            if ($admin_role!=$user['role_id'] && !in_array($actions['id'],$admin_roles)){
                // 不在权限范围内
                throw new Exception('您没有权限访问',102);
            }
            return $user;
        }catch (Exception $e){
            $code = $e->getCode();
            $url_id = $code==100?$basic['not_login']:(in_array($code,[101,102])?$basic['default']:null);
            $acrion = $url_id?get_cache('action.action')[$url_id]:null;
            $url = $acrion?( (!empty($acrion['controller'])?'/'.$acrion['controller']:'').(!empty($acrion['model'])?'/'.$acrion['model']:'').(!empty($acrion['action'])?'/'.$acrion['action']:'').(!empty($acrion['params'])?'/'.$acrion['params']:'') ):null;
            $result = [
                'code'=>$code,
                'msg'=>$e->getMessage(),
                'url' =>$url
            ];
            $this->error=$result;
            return false;
        }

    }
    /**
     * 用户登录操作
     */
    public function sign($data){
        try{
            if(!captcha_check($data['check_code'])){
                throw new Exception('图形验证码不正确');
            }
            if(empty($data['account'])){
                throw new Exception('账号不能为空');
            }
            $where = [];
            $reg = '/^[a-zA-Z0-9.!#$%&\'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/';
            if(preg_match($reg,$data['account'])){
                $where = ['email'=>$data['account']];
            }elseif(preg_match('/^1[0-9]{10}$/',$data['account'])){
                $where = ['phone'=>$data['account']];
            }else{
                $where = ['nickname'=>$data['account']];
            }
            $user = $this->where($where)->find();
            if(empty($user)){
                throw new Exception('用户不存在');
            }
            $passwd = md5(md5($data['passwd']));
            if(strcmp($passwd,$user['passwd']) !== 0){
                throw new Exception('密码不正确');
            }
            $map = ['lastdate'=>time()];
            $this->save($map,$where);
            return $user;
        }catch (Exception $e){
            $this->error = $e->getMessage();
            return false;
        }
    }

    /**
     * 用户注册操作
     * @param mixed $data 用户提交注册数据
     * @return boolean
     */
    public function register($data){
        try{
            if(!captcha_check($data['check_code'])){
                throw new Exception('图形验证码不正确');
            }
            if($data['reg_type'] == 'phone' && !sendsms_check($data['sms_code'])){
                throw new Exception('短信验证码不正确');
            }
            $user = $this->where($data['reg_type'],$data[$data['reg_type']])->find();
            if(!empty($user)){
                throw new Exception($this->infos[$data['reg_type']]);
            }
            if(strcmp($data['passwd'],$data['passwd_verify']) !== 0){
                throw new Exception('您输入的密码不一致');
            }
            $map=[
                $data['reg_type'] => $data[ $data['reg_type'] ],
                'passwd' => $data['passwd'],
                'regip' => $data['regip'],
                'status' => 1, // 状态为正常状态
            ];
            $save = $this->validate('Users.'.$data['reg_type'])->save($map);
            if($save === false){
                return false;
            }
            if($data['reg_type'] == 'email'){
                $result = $this->body($data['email'],$data['passwd'],$data['domain']);
                if($result['errorCode']){
                    throw new Exception('邮箱注册成功,赶紧去邮箱验证吧...');
                }else{
                    throw new Exception('服务器繁忙，邮件发送失败，请稍后再试...');
                }
            }
            $user_role = get_cache('config.basic')['initial_role'];

            $userinfo_data = [
                'uid'=>$this->data['id'],
                'user_group_id'=>model('roles')->where('id',$user_role)->value('group_id'),
                'user_role_id'=>$user_role
            ];
            model('userinfo')->edit($userinfo_data);
            $this->error = '注册成功';
            return true;
        }catch (Exception $e){
            $this->error = $e->getMessage();
            return false;
        }


    }
    // 邮箱注册时发送邮件
    private function body($email,$passwd,$domain){
        $mall_name = get_cache('config.mall')['mall_name'];

        $key = get_cache('config.basic')['encrypt_key'];
        $passwd_en = md5(md5($passwd));
        $code = $email . '!_!' . $passwd_en;
        $checkcode = authcode($code,$key,'E',48*60*60);
        $url = $domain . url('restrict/Index/mailprove') . '?checkcode='.urlencode($checkcode);
        $body = "<div><span class=\"genEmailNicker\"></span><br><span class=\"genEmailContent\"><br>尊敬的用户 ：<br><br>&nbsp;&nbsp; &nbsp; &nbsp; 您好！恭喜您注册成为{$mall_name}。<br><br>&nbsp;&nbsp; &nbsp; &nbsp; 这是一封注册认证邮件，请点击以下链接确认：<br>&nbsp;&nbsp; &nbsp; &nbsp; <a href=\"{$url}\" target=\"_blank\">{$url}</a> <br><br>&nbsp;&nbsp; &nbsp; &nbsp; 如果链接不能点击，请复制地址到浏览器，然后直接打开。<br><br>&nbsp;&nbsp; &nbsp; &nbsp; 上述链接48小时内有效。如果激活链接失效，请您登录网站<a target=\"_blank\" href=\"{$domain}\"> {$domain}</a>重新申请认证。<br><br>&nbsp;&nbsp; &nbsp; &nbsp; 感谢您注册%s！<br><br>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; {$mall_name}项目组<br><br>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; <span style=\"border-bottom:1px dashed #ccc;\" t=\"5\" times=\"\">{$mall_name}</span></span><br><span class=\"genEmailTail\"></span></div>";
        $result = send_mail($email,$email,$mall_name.'-注册认证',$body);
        return $result;
    }
    /**
     * 用户编辑
     *
     */
    public function edit($data){
        $id = $data['id'];
        $where = [];
        if ($id){
            $where = ['id'=>$id];
        }else{
            $data['regip'] = Request::instance()->ip();
        }
        if(empty($data['passwd'])){
            unset($data['passwd']);
        }
        $user = $this->validate("users.admin")->save($data,$where);
        if($user){
            return $this->data['id'];
        }
        return false;
    }

    /**
     * 自动加密密码
     */
    public function setPasswdAttr($value){
        return md5(md5($value));
    }
    /**
     * 个人中心数据获取模型方法
     *
     **/
    public function personal($user){
        // 优惠券张数
        $coupon_num = model('userCoupon')->where('uid',$user['id'])->count();
        // 我的订单
        $order_where = ['uid'=>$user['id']];
        $order_order = ['create_time'=>'desc'];
        $orders = model('orders')->orders($order_where,$order_order,2)->toArray()['data'];

        $assigns = [
            'coupon_num'=>$coupon_num,
            'orders'=>$orders
        ];
        return $assigns;
    }

}