<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/10/17
 * Time: 9:15
 */

namespace app\common\model;


use think\Db;
use think\Session;

class Orders extends Base
{
    protected $_cart;
    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->_cart = model('cart');
    }
    // 直接购买添加订单
    public function buy_now($data){
        $create_order = Session::get('create_order');
        if(!empty($create_order['order']) && $create_order['expire']>time() && $create_order['token'] == $data['token']){
            dump(true);
            return $create_order['order'];
        }
        $cart_id = $this->_cart->create_cart($data);
        if($cart_id === false){
            $this->error = '订单生成失败';
            return false;
        }
        $data['cart_id'] = $cart_id;
        $order = $this->create_order($data);
        return $order;
    }
    // 购物车购买
    public function buy($data){
        $create_order = Session::get('create_order');
        if(!empty($create_order['order']) && $create_order['expire']>time() && $create_order['token'] == $data['token']){
            dump(true);
            return $create_order['order'];
        }
        $order = $this->create_order($data);
        return $order;
    }
    // 创建订单  还没有减库存
    public function create_order($data){
        $map = [
            'uid'=>$data['uid'],
            'serial' => serial('p'),
            'pay_price' => '',
            'market_price' => '',
            'consignee' => '',
            'integral' => '0',
            'payment' => $data['payment'],
            'pay_status' => '0',
            'delivery_status' => '0',
            'refund_status' => '0',
            'remark' => $data['remark'],
            'give_up' => '0',
            'place_time' => time()
        ];
        $session = ['order'=>[],'token'=>$data['token'],'expire'=>$session['expire'] = time()+30*60]; // 订单添加成功时记录值
        $price_field = ['sum(`shop_price`*`sum`) pay_price','sum(`market_price`*`sum`) market_price','goods_name' ,'max(`freight`) freight'];
        $prices = $this->_cart
            ->where('id','in',$data['cart_id'])
            ->field($price_field)
            ->find()->toArray();
        // 添加session
        $session['order']['body'] = $prices['goods_name'].'等...';
        unset($prices['goods_name']);
        $map = array_merge($map,$prices);
        $consignee = Db::name('address')->where('id',$data['addr_id'])->find();
        $map['consignee'] = json_encode($consignee);

        $order = $this->save($map);
        if(!$order){
            $this->error = '下单失败';
            return false;
        }
        $order_id = $this->getLastInsID();
        $cart = $this->_cart->save(['order_id'=>$order_id],['id'=>['in',$data['cart_id']] ]);
        if(empty($cart)){
            $this->error = '购物车修改失败';
            return false;
        }
        $session['order']['total_fee'] = $prices['pay_price'] + $prices['freight']; // 金额
        $session['order']['out_order_no'] = $map['serial']; // 订单号
        $session['order']['subject'] = $session['order']['body']; // 商品描述
        $session['order']['product_id'] = $order_id; // 商品id
        Session::set('create_order',$session);
        return $session['order'];
    }

}