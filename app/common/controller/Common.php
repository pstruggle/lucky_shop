<?php
namespace app\common\controller;

use think\Config;
use think\Controller;
use think\Cookie;
use think\Db;
use think\Exception;
use think\Request;
use think\Response;
use think\Url;
use think\View;
use think\exception\HttpResponseException;


class Common extends Controller
{
    protected $theme; // 主题控制
    protected $module; //当前请求模块
    protected $controller; //当前请求控制器
    protected $action; //当前请求方法
    protected $user; //当前登录用户信息
    protected $_users; // 用户模型实例
    protected function _initialize(){
        parent::_initialize();  // TODO: Change the autogenerated stub
        $this->init();
    }
    /**
     * 初始化控制器
     * */
    public function init(){
        $this->theme = 'appui';
        $this->_users = model('users');
        $this->module = $this->request->module(); // 获取模块
        $this->controller = $this->request->controller(); // 获取控制器
        $this->action = $this->request->action(); // 获取方法
        $this->gain_user();
    }
    /**
     * 判断用户是否登录
     */
    protected function check_login(){
        if(empty($this->user)){
            $this->error('请先登录...',
                url('restrict/Index/index'));
        }
        if(empty($this->user['nickname']) &&
            empty($this->user['phone']) &&
            !empty($this->user['email']) &&
            $this->user['mail_verify'] != 1){
            return '';
        }

//        $_auth = model('auth');
//        $_auth->setUser($this->user);
//        if(!$_auth->check($this->action())){
//            $url = '';
//            if(empty($this->user)){
//                $url = url('restrict/index/index');
//            }
//            return $this->error($_auth->getError(),$url);
//        }
    }
    /**
     * 用户登陆验证码
     */
    protected function gain_user(){
        $module = lcfirst($this->module);
        $controller = lcfirst($this->controller);
        $action = lcfirst($this->action);
        $route = $this->request->route();
        $user = $this->user = $this->_users->auth($module,$controller,$action,$route);
        if(!$user){
            $errors = $this->_users->getError();
            $this->returnError($errors['msg'],$errors['url'],'',$errors['code']);
        }
        $this->assign('user',$user);
    }
    /**
     * 权限标识
     */
    protected function action(){
        return $this->module.'_'.strtolower($this->controller).'_'.$this->action;
    }
    /**
     * 用户信息储存
     * @return  null
     */
    protected function record_user(){
        $key = get_cache('config.basic')['encrypt_key'];
        if(!$this->user){
            return false;
        }
        $id = authcode($this->user['id'],$key);
        $secret = authcode($this->user['passwd'],$key);
        Cookie::set('token',$id);
        Cookie::set('secret',$secret);
    }

    /**
     * 渲染输出
     * @param string $fetch 显示模板
     */
    protected function template($template = '', $vars = [], $replace = [], $config = []){

        $temp = '';
        if($this->theme != ''){
            $temp .= $this->theme .'/';
        }
        if(!empty($this->module)){
            $temp .= $this->module .'/';
        }
        $def_config = ['view_path'=>__DIR__.'/../view/'.$temp];
        $config = array_merge($def_config,$config);
        return $this->view->config($config)->fetch($template, $vars , $replace , $config);
    }
    /**
     * 获取跳转到当前页的地址
     */
    protected function last_url(){
        return $_SERVER["HTTP_REFERER"] ?:url('index/Index/index');
    }
    /**
     * 跳转到上一页
     */
    protected function last_redirect(){
        $this->redirect($this->last_url());
    }
    /**
     * 操作错误跳转的快捷方法
     * @access protected
     * @param mixed     $msg 提示信息
     * @param string    $url 跳转的URL地址
     * @param mixed     $data 返回的数据
     * @param mixed     $code 返回的数据
     * @param integer   $wait 跳转等待时间
     * @param array     $header 发送的Header信息
     * @return void
     */
    protected function returnError($msg = '', $url = null, $data = '',$code = 0, $wait = 3, array $header = [])
    {
        $type = $this->getResponseType();
        if ('html' == strtolower($type)) {
            $this->error($msg, $url, $data, $wait, $header);
        }else{
            $this->result($data,$code,$msg,'',$header);
        }
    }



}